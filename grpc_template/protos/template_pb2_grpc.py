# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
from grpc_template.protos import template_pb2 as template__pb2


class TemplateStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.HelloWorld = channel.unary_unary(
            '/Template/HelloWorld',
            request_serializer=template__pb2.HelloWorldRequest.SerializeToString,
            response_deserializer=template__pb2.HelloWorldReply.FromString,
        )
        self.Hello = channel.unary_unary(
            '/Template/Hello',
            request_serializer=template__pb2.HelloRequest.SerializeToString,
            response_deserializer=template__pb2.HelloReply.FromString,
        )


class TemplateServicer(object):
    """Missing associated documentation comment in .proto file."""

    def HelloWorld(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Hello(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TemplateServicer_to_server(servicer, server):
    rpc_method_handlers = {
        'HelloWorld': grpc.unary_unary_rpc_method_handler(
            servicer.HelloWorld,
            request_deserializer=template__pb2.HelloWorldRequest.FromString,
            response_serializer=template__pb2.HelloWorldReply.SerializeToString,
        ),
        'Hello': grpc.unary_unary_rpc_method_handler(
            servicer.Hello,
            request_deserializer=template__pb2.HelloRequest.FromString,
            response_serializer=template__pb2.HelloReply.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        'Template', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


# This class is part of an EXPERIMENTAL API.
class Template(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def HelloWorld(request,
                   target,
                   options=(),
                   channel_credentials=None,
                   call_credentials=None,
                   insecure=False,
                   compression=None,
                   wait_for_ready=None,
                   timeout=None,
                   metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Template/HelloWorld',
                                             template__pb2.HelloWorldRequest.SerializeToString,
                                             template__pb2.HelloWorldReply.FromString,
                                             options, channel_credentials,
                                             insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Hello(request,
              target,
              options=(),
              channel_credentials=None,
              call_credentials=None,
              insecure=False,
              compression=None,
              wait_for_ready=None,
              timeout=None,
              metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Template/Hello',
                                             template__pb2.HelloRequest.SerializeToString,
                                             template__pb2.HelloReply.FromString,
                                             options, channel_credentials,
                                             insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
